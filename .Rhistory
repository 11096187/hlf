plays2(tablero1, tablero2)
}
}
# Does what "player1" function does, but for player 2
plays2 <- function(tablero1, tablero2)
{
gameStatusOn <- TRUE
while (gameStatusOn)
{
touched <- FALSE
print("Jugador 2, introduzca coordenada de disparo:")
input <- inputUsuario()
while (!validateShot(input)) {
print("Asegurese de que el formato sea correcto e intente nuevamente:")
input <- inputUsuario()
}
if (input == "R")
{
gameStatusOn <- FALSE
}
else
{
outcome <- shot(input, tablero1)
if (outcome[1] > 0 && outcome[1] < 11) {
tablero1[outcome[1], outcome[2]] <- "H"
touched <- TRUE
}
else if (outcome[1] == 0)
{
gameStatusOn <- FALSE
print("AGUA")
}
}
if (touched)
{
tablero1 <- detectSunkBoats(tablero1)
}
mostrarTablero(tablero1)
}
if (input != "R")
{
plays1(tablero1, tablero2)
}
}
# Single player starts shooting
singlePlayer <- function(tablero)
{
gameStatusOn <- TRUE
while (gameStatusOn)
{
touched <- FALSE
print("Jugador, introduzca coordenada de disparo:")
input <- inputUsuario()
while (!validateShot(input))
{
print("Asegurese de que el formato sea correcto e intente nuevamente:")
input <- inputUsuario()
}
if (input == "R")
{
gameStatusOn <- FALSE
}
else
{
outcome <- shot(input, tablero)
if (outcome[1] > 0 && outcome[1] < 11)
{
tablero[outcome[1], outcome[2]] <- "H"
touched <- TRUE
}
else if (outcome[1] == 0)
{
print("AGUA")
}
}
if (touched)
{
tablero <- detectSunkBoats(tablero)
}
mostrarTablero(tablero)
}
}
# Goes though the entire matrix looking for boats that are sunk but still marked as "H" and changes it to the "*" sign.
detectSunkBoats <- function(table)
{
for (x in 1:10)
{
for (y in 1:10)
{
verticalCt <- 0
horizontalCt <- 0
if (table[x, y] == "H")
{
valid <- TRUE
isVertical <- TRUE
if (y > 1 && y < 10)
{
if (table[x, (y - 1)] != "b" || table[x, (y + 1)] != "b")
{
isVertical <- FALSE
}
}
else if (y > 1)
{
if (table[x, (y - 1)] != "b")
{
isVertical <- FALSE
}
}
else {
if (table[x, (y + 1)] != "b")
{
isVertical <- FALSE
}
}
if (isVertical)
{
### VERTICAL ###
allH <- TRUE
# check upward
i <- 0
status <- TRUE
while (status & i <= 5)
{
if ((x - i) >= 1)
{
if (table[(x - i), y] == "b")
{
status <- FALSE
}
else if (table[(x - i), y] == "x")
{
status <- FALSE
allH <- FALSE
}
}
i <- i + 1
}
# check downward
i <- 0
status <- TRUE
while (status & i <= 5)
{
if ((x + i) <= 10)
{
if (table[(x + i), y] == "b")
{
status <- FALSE
}
else if (table[(x + i), y] == "x")
{
status <- FALSE
allH <- FALSE
}
}
i <- i + 1
}
if (allH)
{
table[x, y] <- "*"
}
}
else
{
### HORIZONTAL ###
allH <- TRUE
# check left
i <- 0
status <- TRUE
while (status & i <= 5)
{
if ((y - i) >= 1)
{
if (table[x, (y - i)] == "b")
{
status <- FALSE
}
else if (table[x, (y - i)] == "x")
{
status <- FALSE
allH <- FALSE
}
}
i <- i + 1
}
# check downward
i <- 0
status <- TRUE
while (status & i <= 5)
{
if ((y + i) <= 10)
{
if (table[x, (y + i)] == "b")
{
status <- FALSE
}
else if (table[x, (y + i)] == "x")
{
status <- FALSE
allH <- FALSE
}
}
i <- i + 1
}
if (allH) {
table[x, y] <- "*"
}
}
}
}
}
return(table)
}
validateEntireTable <- function(table)
{
valid = TRUE
for(x in 2:9)
{
for(y in 2:9)
{
if(table[x,y] != "b" && table[x,y] != "x")
{
valid = FALSE
}
}
}
if(valid)
{
for(x in 2:9)
{
for(y in 2:9)
{
if(table[x,y] == "x")
{
if(table[(x-1),y] == "x" && table[x,(y+1)] == "x")
{
valid = FALSE
}
if(table[(x-1),y] == "x" && table[x,(y-1)] == "x")
{
valid = FALSE
}
if(table[(x+1),y] == "x" && table[x,(y+1)] == "x")
{
valid = FALSE
}
if(table[(x+1),y] == "x" && table[x,(y-1)] == "x")
{
valid = FALSE
}
}
}
}
if(valid)
{
x = 1
for(y in 1:9)
{
if(table[(x+1),y] == "x" && table[x,(y+1)] == "x" && table[x,y] == "x")
{
valid = FALSE
}
}
x = 10
for(y in 1:9)
{
if(table[(x-1),y] == "x" && table[x,(y+1)] == "x" && table[x,y] == "x")
{
valid = FALSE
}
}
if(table[1,1] == "x" && table[1,2] == "x" && table[2,1] == "x")
{
valid = FALSE
}
if(table[10,1] == "x" && table[9,1] == "x" && table[10,2] == "x")
{
valid = FALSE
}
if(table[1,10] == "x" && table[1,9] == "x" && table[2,10] == "x")
{
valid = FALSE
}
if(table[10,10] == "x" && table[10,9] == "x" && table[9,10] == "x")
{
valid = FALSE
}
}
}
return(valid)
}
countFlota<-function(table)
{
table = cbind(table,c("b","b","b","b","b","b","b","b","b","b"))
table = cbind(c("b","b","b","b","b","b","b","b","b","b"),table)
table = rbind(table,c("b","b","b","b","b","b","b","b","b","b","b","b"))
table = rbind(c("b","b","b","b","b","b","b","b","b","b","b","b"),table)
rownames(table) = 1:12
colnames(table) = 1:12
flota = c(0,0,0,0,0)
for(x in 2:11)
{
for(y in 2:11)
{
if(table[x,y] == "x")
{
ct = 1
if(table[(x-1),y] == "b" && table[(x+1),y] == "b")
{
#HORIZONTAL
i = 1
status = TRUE
while((y+i) <= 12 && status)
{
if(table[x,(y+i)] == "b")
{
status = FALSE
}
else
{
i = i + 1
}
}
ct = ct + (i-1)
i = 1
status = TRUE
while((y-i) >= 0 && status)
{
if(table[x,(y-i)] == "b")
{
status = FALSE
}
else
{
i = i + 1
}
}
ct = ct + (i-1)
}
else
{
#VERTICAL
i = 1
status = TRUE
while((x+i) <= 12 && status)
{
if(table[(x+i),y] == "b")
{
status = FALSE
}
else
{
i = i + 1
}
}
ct = ct + (i-1)
i = 1
status = TRUE
while((x-i) >= 0 && status)
{
if(table[(x-i),y] == "b")
{
status = FALSE
}
else
{
i = i + 1
}
}
ct = ct + (i-1)
}
if(ct == 5)
{
flota[1] = flota[1] + 1
}
else if(ct == 4)
{
flota[2] = flota[2] + 1
}
else if(ct == 3)
{
flota[3] = flota[3] + 1
}
else if(ct == 2)
{
flota[4] = flota[4] + 1
}
else if(ct == 1)
{
flota[5] = flota[5] + 1
}
else
{
flota[1] = 999
}
}
}
}
flota[1] = flota[1] / 5
flota[2] = flota[2] / 4
flota[3] = flota[3] / 3
flota[4] = flota[4] / 2
flota[5] = flota[5] / 1
if(flota[1] != 1 || flota[2] != 2 || flota[3] != 2 || flota[4] != 3 || flota[5] != 4)
{
flota[1] = 999
}
return(flota)
}
opcion1 <- function() {
if ("readxl" %in% rownames(installed.packages()) == FALSE) {
install.packages("readxl")
}
if ("readr" %in% rownames(installed.packages()) == FALSE) {
install.packages("readr")
}
library(readxl)
library(readr)
file = read_excel(file.choose(), skip=1,col_names=c("A","B","C","D","E","F","G","H","I","J"))
fBoat <- names(file)
file <- unlist(file, use.name = FALSE)
file <- c(fBoat, file)
valid = TRUE
l = 11
if(length(file) == 110)
{
tablero <- matrix(c(1:100), nrow = 10, ncol = 10)
for (i in 1:10)
{
for (j in 1:10)
{
tablero[j, i] <- file[l]
l = l + 1
}
}
}
else
{
valid = FALSE
}
if(!validateEntireTable(tablero))
{
valid = FALSE
print("ERROR: Boats intersect each other. You will be redirected to the menu...")
}
else
{
flota = countFlota(tablero)
if(flota[1] > 1)
{
valid = FALSE
print("ERROR: Boat sizes do not fit requirements. You will be redirected to the menu...")
}
}
if (valid) {
# SINGLE PLAYER
print("Board successfully loaded.")
mostrarTablero(tablero)
}
}
opcion2 <- function() {
tablero1 <- matrix(c(1:100), nrow = 10, ncol = 10)
tablero2 <- matrix(c(1:100), nrow = 10, ncol = 10)
for (i in 1:10)
{
for (j in 1:10)
{
tablero1[i, j] <- "b"
tablero2[i, j] <- "b"
}
}
# Los vectores "flota1" y "flota2": 1 barco de 5 casillas, 2 barcos de 4 casillas, 2 barcos de 3 casillas, 3 barcos de 2 casillas, 4 barcos de 1 casilla -> comineza c(0,0,0,0,0) y luego va contando cu??ntos barcos se ingresaron
flota1 <- c(0, 0, 0, 0, 0)
flota2 <- c(0, 0, 0, 0, 0)
mostrarTablero(tablero1)
## PLAYER 1
while (flota1[1] < 1 || flota1[2] < 2 || flota1[3] < 2 || flota1[4] < 3 || flota1[5] < 4) {
cat("\nTiene la siguiente cantidad de barcos disponibles:\n
5 casillas: ", (1 - flota1[1]),
"\n4 casillas: ", (2 - flota1[2]),
"\n3 casillas: ", (2 - flota1[3]),
"\n2 casillas: ", (3 - flota1[4]),
"\n1 casilla: ", (4 - flota1[5]), "\n\n")
print("User number 1: enter the position of a ship")
input <- inputUsuario()
while (!validarPosicion(input) || !tamanoDisponible(input, flota1) || !posicionDisponible(input, tablero1) || !boatsDontTouch(input, tablero1)) {
print("Make sure to enter a valid boat size in an empty position into the valid format. Please try again:")
input <- inputUsuario()
}
tablero1 <- actualizarTablero(input, tablero1)
flota1 <- actualizarFlota(input, flota1)
mostrarTablero(tablero1)
}
## PLAYER 2
while (flota2[1] < 1 || flota2[2] < 2 || flota2[3] < 2 || flota2[4] < 3 || flota2[5] < 4) {
cat("\nTiene la siguiente cantidad de barcos disponibles:\n5 casillas: ", (1 - flota2[1]), "\n4 casillas: ", (2 - flota2[2]), "\n3 casillas: ", (2 - flota2[3]), "\n2 casillas: ", (3 - flota2[4]), "\n1 casilla: ", (4 - flota2[5]), "\n\n")
print("Usuario nro 2: ingrese la posicion de un barco")
input <- inputUsuario()
while (!validarPosicion(input) || !posicionDisponible(input, tablero2) || !tamanoDisponible(input, flota2) || !boatsDontTouch(input, tablero2)) {
print("Asegurese ingresar en formato valido un tama??o de barco disponible en una posicion vacia. Intentelo nuevamente:")
input <- inputUsuario()
}
tablero2 <- actualizarTablero(input, tablero2)
flota2 <- actualizarFlota(input, flota2)
mostrarTablero(tablero2)
}
plays1(tablero1, tablero2)
}
opcion3 <- function() {
print("You're in option 3")
}
menu() # Calls the main menu
